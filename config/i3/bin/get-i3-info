#!/bin/python3
from i3ipc import Connection, Event
from json import dumps
import subprocess
import sys
import os

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk

MINIMUM_WORKSPACES = 5
EWW_PATH = os.path.expanduser("~/.local/bin/eww")
EWW_WIDGETS = ["topbar", "bottombar"]
TMP_FILEPATH = "/tmp/i3_data"

#Create tmpdata if it doesnt exist
if not os.path.isfile(TMP_FILEPATH):
    with open(TMP_FILEPATH, 'w') as f:
        pass

#Takes a search id, and attempts to find the parent of the search_id
#Copy-and-pasted from bsp
def search_for_parent(con, search_id):
    nodes = con.nodes

    #base case 1: we found the id
    if con.id == search_id:
        return con

    #base case 2: no children.
    if len(nodes) == 0:
        return None

    #recursive case: check children
    for node in nodes:
        attempt = search_for_parent(node, search_id)
        if attempt != None:
            #if our result is the EXACT id we are looking for, go back one layer to get the parent
            if search_id == attempt.id:
                return node

            return attempt
    return None

i3 = Connection()

#So it turns out, just like the BSP script, the tree also is not up-to-date with focused information. So we need to subscribe to the window focus event.
def get_info(i3, e):
    workspaces = i3.get_workspaces()
    output = {}
    focused = i3.get_tree().find_focused()
    #truncate the name if it is too long
    #commented out because im using window instances instead of titles. (these c
    #new_focused_name = ('..' + focused.name[MAX_FOCUSED_LENGTH:]) if len(focused.name) > MAX_FOCUSED_LENGTH else focused.name
    new_focused_name = focused.window_instance
    output["focused_window_instance"] = new_focused_name

    #Get the icon filepath via gi
    try:
        gdk_screen = Gdk.Screen.get_default()
        icon_theme = Gtk.IconTheme.get_for_screen(gdk_screen)
        icon_info = icon_theme.lookup_icon(new_focused_name, 48, 0)
        icon_filepath = icon_info.get_filename()
        output["focused_window_icon"] = icon_filepath
    except:
        #This should be default for Adwaita, so this shouldn't NoneType error..?
        icon_info = icon_theme.lookup_icon("application-x-executable", 48, 0)
        icon_filepath = icon_info.get_filename()
        output["focused_window_icon"] = icon_filepath

    #For some reason, the "floating" property doesnt get updated per window, so we need to re-aqcuire it
    #I guess i3 creates a TOP-LEVEL container for each individual floating window. So not only do we have to go through workspace.floating_nodes, we need to go through their OWN children as well
    workspace = focused.workspace()
    top_level_float_containers = workspace.floating_nodes
    floating_containers = []
    for con in top_level_float_containers:
        for node in con.nodes:
            floating_containers.append(node.id)
    isFloating = focused.id in floating_containers
    output["isFloating"] = isFloating;

    parent = search_for_parent(i3.get_tree(), focused.id)
    output["orientation"] = parent.orientation if parent is not None else None

    #If a window is in fullscreen, disable the widgets. Otherwise, re-enable them
    isFullscreen = len(workspace.find_fullscreen()) > 0
    
    def isWorkspaceChange(event):
        if event == None:
            return False
        if event.change != "run":
            return False
        if event.binding == None:
            return False
        if event.binding.command == None:
            return False
        if any(x in event.binding.command for x in ["workspace number", "fullscreen toggle"]):
            return True
        else:
            return False

    if (isWorkspaceChange(e)):
        if (isFullscreen):
            subprocess.run([EWW_PATH, "close", *EWW_WIDGETS], stdout = subprocess.DEVNULL)
        else:
            subprocess.run([EWW_PATH, "open-many", *EWW_WIDGETS], stdout = subprocess.DEVNULL)
    
    #Set up a map of our workspaces
    workspace_info = {}

    #Record our existing workspace data
    for workspace in workspaces:
        if workspace.focused == True:
            output["focused_workspace"] = workspace.name
        workspace_output = {
            #NOTE: We're assuming we have numbered workspace names. If this changes, we'll need to refactor this
            "name" : int(workspace.name),
            "focused": workspace.focused
        }
        workspace_info[int(workspace.name)] = workspace_output
    
    #Go through and add the minimum workspaces if and only if they don't already exist yet
    for i in range(1, MINIMUM_WORKSPACES + 1):
        #Assume the name is a number
        workspace_name = i
        
        #if defined, skip
        if (bool(workspace_info.get(workspace_name))):
            continue
        
        workspace_output = {
            "name": str(i),
            "focused": False
        }
        workspace_info[workspace_name] = workspace_output

    #For eww. convert array into a single string of eww code
    def convert_to_eww(workspace):
        return f'(_workspace_item :name \'{workspace["name"]}\' :focused \'{str(workspace["focused"]).lower()}\')'

    #We are sorting the workspaces dict by key. this will return a 2-tuple of key-value pairs, but we will only pass the value into the conversion function
    joined_workspaces = ''.join([convert_to_eww(workspace[1]) for workspace in sorted(workspace_info.items())])
    outer = f"(box {joined_workspaces})"
    output["workspaces"] = outer

    #Write to temp file for eww to pick up
    #(We have to do it this way because simply just printing the output would actually indirectly kill this script due to how the script closes eww widgets)
    with open(TMP_FILEPATH, "a") as f:
        f.write(dumps(output))
        f.write("\n")

#Run handler so we get some initial data
get_info(i3, None)
#Subscribe to Events that we want to update info on
i3.on(Event.WINDOW_FOCUS, get_info)
i3.on(Event.WORKSPACE_FOCUS, get_info)
i3.on(Event.WINDOW_URGENT, get_info)
i3.on(Event.BINDING, get_info)
i3.main()
